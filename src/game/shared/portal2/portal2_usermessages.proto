//====== Copyright (c) 2013, Valve Corporation, All rights reserved. ========//
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation 
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//===========================================================================//
//
// Purpose: The file defines our Google Protocol Buffers which are used in over 
// the wire messages for the Source engine.
//
//=============================================================================

syntax = "proto2";

// We care more about speed than code size
option optimize_for = SPEED;

// We don't use the service generation functionality
option cc_generic_services = false;

// 
// STYLE NOTES:
//
// Use CamelCase CMsgMyMessageName style names for messages.
// 
// Use lowercase _ delimited names like my_steam_id for field names, this is non-standard for Steam,
// but plays nice with the Google formatted code generation.  
// 
// Try not to use required fields ever. Only do so if you are really really sure you'll never want them removed. 
// Optional should be preffered as it will make versioning easier and cleaner in the future if someone refactors
// your message and wants to remove or rename fields.
//
// Use fixed64 for JobId_t, GID_t, or SteamID.  This is appropriate for any field that is normally
// going to be larger than 2^56.  Otherwise use int64 for 64 bit values that are frequently smaller
// than 2^56 as it will safe space on the wire in those cases.
//
// Similar to fixed64, use fixed32 for RTime32 or other 32 bit values that are frequently larger than
// 2^28.  It will safe space in those cases, otherwise use int32 which will safe space for smaller values.
// An exception to this rule for RTime32 is if the value will frequently be zero rather than set to an actual 
// time.
//

import "google/protobuf/descriptor.proto";

// for CMsgVector, etc.
import "netmessages.proto";

//=============================================================================
// Portal2 User Messages
//=============================================================================
enum EPortal2UserMessages
{ 
	// HL2
	UM_Geiger						= 1;
	UM_Train						= 2;
	UM_HudText						= 3;
	UM_SayText						= 4;
	UM_SayText2						= 5;
	UM_TextMsg						= 6;
	UM_HudMsg						= 7;
	UM_ResetHud						= 8;
	UM_GameTitle					= 9;
	UM_ItemPickup					= 10;
	UM_ShowMenu						= 11;
	UM_Shake						= 12;
	UM_Tilt							= 13;
	UM_Fade							= 14;
	UM_VGUIMenu						= 15;
	UM_Rumble						= 16;
	UM_Battery						= 18;
	UM_Damage						= 19;
	UM_VoiceMask					= 20;
	UM_RequestState					= 21;
	UM_CloseCaption					= 22;
	UM_CloseCaptionDirect			= 23;
	UM_HintText						= 24;
	UM_KeyHintText					= 25;
	UM_SquadMemberDied				= 26;
	UM_AmmoDenied					= 27;
	UM_CreditsMsg					= 28;
	UM_LogoTimeMsg					= 29;
	UM_AchievementEvent				= 30;
	UM_UpdateJalopyRadar			= 31;
	UM_CurrentTimescale				= 32;
	UM_DesiredTimescale				= 33;

	// PORTAL2
	UM_CreditsPortalMsg				= 34;
	UM_InventoryFlash				= 35;
	UM_IndicatorFlash				= 36;
	UM_ControlHelperAnimate			= 37;
	UM_TakePhoto					= 38;
	UM_Flash						= 39;
	UM_HudPingIndicator				= 40;
	UM_OpenRadialMenu				= 41;
	UM_AddLocator					= 42;
	UM_MPMapCompleted				= 43;
	UM_MPMapIncomplete				= 44;
	UM_MPMapCompletedData			= 45;
	UM_MPTauntEarned				= 46;
	UM_MPTauntUnlocked				= 47;
	UM_MPTauntLocked				= 48;
	UM_MPAllTauntsLocked			= 49;
	UM_PortalFX_Surface				= 50;
	UM_PaintWorld					= 51;
	UM_PaintEntity					= 52;
	UM_ChangePaintColor				= 53;
	UM_PaintBombExplode				= 54;
	UM_RemoveAllPaint				= 55;
	UM_PaintAllSurfaces				= 56;
	UM_RemovePaint					= 57;
	UM_StartSurvey					= 58;
	UM_ApplyHitBoxDamageEffect		= 59;
	UM_SetMixLayerTriggerFactor		= 60;
	UM_TransitionFade				= 61;
	UM_ScoreboardTempUpdate			= 62;
	UM_ChallengeModeCheatSession	= 63;
	UM_ChallengeModeCloseAllUI		= 64;
}

//=============================================================================
// HL2
//=============================================================================
message CUsrMsg_Geiger
{
	optional int32 range = 1;
}

message CUsrMsg_Train
{
	optional int32 train = 1;
}

message CUsrMsg_HudText
{
	optional string text = 1;
}

message CUsrMsg_SayText
{
	optional int32 ent_idx = 1;
	optional string text = 2;
	optional bool chat = 3;
	optional bool textallchat = 4;
}

message CUsrMsg_SayText2
{
	optional int32 ent_idx = 1;
	optional bool chat = 2;
	optional string msg_name = 3;
	repeated string params = 4;
	optional bool textallchat = 5;
}

message CUsrMsg_TextMsg
{
	optional int32 msg_dst = 1;
	repeated string params = 3;
}

message CUsrMsg_HudMsg
{
	optional int32 channel = 1;
	optional CMsgVector2D pos = 2;
	optional CMsgRGBA clr1 = 3;
	optional CMsgRGBA clr2 = 4;
	optional int32 effect = 5;
	optional float fade_in_time = 6;
	optional float fade_out_time = 7;
	optional float hold_time = 9;
	optional float fx_time = 10;
	optional string text = 11; 
}

message CUsrMsg_ResetHud
{
	optional bool reset = 1;
}

message CUsrMsg_GameTitle
{
	optional int32 dummy = 1;
}

message CUsrMsg_ItemPickup
{
	optional string item = 1;
}

message CUsrMsg_ShowMenu
{
	optional int32 bits_valid_slots = 1;
	optional int32 display_time = 2;
	optional string menu_string = 3;	
}

message CUsrMsg_Shake
{
	optional int32 command = 1;
	optional float local_amplitude = 2;
	optional float frequency = 3;
	optional float duration = 4;
}

message CUsrMsg_Tilt
{
	optional int32 command = 1; // tilt command (SHAKE_START, STOP, FREQUENCY, AMPLITUDE)
	optional int32 ease_in_out = 2; // tilt ease in/out
	optional CMsgVector angle = 3; // tilt angle
	optional float duration = 4; // tilt lasts this long
	optional float time = 5; // tilt time
}

message CUsrMsg_Fade
{
	optional int32 duration = 1;
	optional int32 hold_time = 2;
	optional int32 flags = 3; // fade type (in / out)
	optional CMsgRGBA clr = 4;
}

message CUsrMsg_VGUIMenu
{
	optional string name = 1;
	optional bool show = 2;

	message Subkey
	{
		optional string name = 1;
		optional string str = 2;
	}

	repeated Subkey subkeys = 3;
}

message CUsrMsg_Rumble
{
	optional int32 index = 1;
	optional int32 data = 2;
	optional int32 flags = 3;
}

message CUsrMsg_Battery
{
	optional int32 batteryval = 1;
}

message CUsrMsg_Damage
{
	optional int32 armor = 1;
	optional int32 damageTaken = 2;
	optional int32 bitsDamage = 3;
	optional float damageOriginX = 4;
	optional float damageOriginY = 5;
	optional float damageOriginZ = 6;
}

message CUsrMsg_VoiceMask
{
	message PlayerMask
	{
		optional int32 game_rules_mask = 1;
		optional int32 ban_masks = 2;
	}

	repeated PlayerMask player_masks = 1;
	optional bool player_mod_enable = 2;
}

message CUsrMsg_RequestState
{
	optional int32 dummy = 1;
}

message CUsrMsg_CloseCaption
{
	optional uint32 hash = 1;
	optional int32 duration = 2;
	optional bool from_player = 3;
}

message CUsrMsg_CloseCaptionDirect
{
	optional uint32 hash = 1;
	optional int32 duration = 2;
	optional bool from_player = 3;
}

message CUsrMsg_HintText
{
	optional string text = 1;
}

message CUsrMsg_KeyHintText
{
	repeated string hints = 1;
}

message CUsrMsg_SquadMemberDied
{
	optional int32 dummy = 1;
}

message CUsrMsg_AmmoDenied
{
	optional int32 ammoIdx = 1;
}

message CUsrMsg_CreditsMsg
{
	optional int32 creditstype = 1;
}

message CUsrMsg_LogoTimeMsg
{
	optional float logotime = 3;
}

message CUsrMsg_AchievementEvent
{
	optional int32 achievement = 1;
	optional int32 count = 2;
	optional int32 user_id = 3;
}

message CUsrMsg_UpdateJalopyRadar
{
	optional int32 dummy = 1;
}

message CUsrMsg_CurrentTimescale
{
	optional float cur_timescale = 1;
}

message CUsrMsg_DesiredTimescale
{
	optional float desired_timescale = 1;
	optional float duration_realtime_sec = 2;
	optional int32 interpolator_type = 3;
	optional float start_blend_time = 4;
}

//=============================================================================
// PORTAL2
//=============================================================================
message CUsrMsg_CreditsPortalMsg
{
	optional int32 creditstype = 1;
}

message CUsrMsg_InventoryFlash
{
	optional int32 dummy = 1;
}

message CUsrMsg_IndicatorFlash
{
	optional int32 indicator_type = 1;
	optional float fadetime = 2;
}

message CUsrMsg_ControlHelperAnimate
{
	optional int32 dummy = 1;
}

message CUsrMsg_TakePhoto
{
	optional int32 dummy = 1;
}

message CUsrMsg_Flash
{
	optional int32 dummy = 1;
}

message CUsrMsg_HudPingIndicator
{
	optional int32 posx = 1;
	optional int32 posy = 2;
	optional int32 posz = 3;
}

message CUsrMsg_OpenRadialMenu
{
	optional int32 dummy = 1;
}

message CUsrMsg_AddLocator
{
	optional int32 playerindex = 1;
	optional uint32 target = 2;
	optional string iconname = 3;
	optional float display_time = 4;
	optional float position_x = 5;
	optional float position_y = 6;
	optional float position_z = 7;
	optional float normal_x = 8;
	optional float normal_y = 9;
	optional float normal_z = 10;
}

message CUsrMsg_MPMapCompleted
{
	optional int32 branch = 1;
	optional int32 level = 2;
}

message CUsrMsg_MPMapIncomplete
{
	optional int32 branch = 1;
	optional int32 level = 2;
}

message CUsrMsg_MPMapCompletedData // Use a fixed-sized integer to represent the bits
{
	optional uint32 num_bits = 1;
}

message CUsrMsg_MPTauntEarned // Taunts are useless, just put some junk
{
	optional bool silent = 1;
	optional string tauntname = 2;
}

message CUsrMsg_MPTauntUnlocked
{
	optional string args = 1;
}

message CUsrMsg_MPTauntLocked
{
	optional string args = 1;
}

message CUsrMsg_MPAllTauntsLocked
{
	optional int32 dummy = 1;
}

message CUsrMsg_PortalFX_Surface
{
	optional int32 portalent = 1;
	optional int32 ownerent = 2;
	optional int32 team = 3;
	optional int32 portalnum = 4;
	optional int32 effect = 5;
	optional float origin_x = 6;
	optional float origin_y = 7;
	optional float origin_z = 8;
	optional float angles_pitch = 9;
	optional float angles_yaw = 10;
	optional float angles_roll = 11;
}

message CUsrMsg_PaintWorld
{
	optional uint32 paintpower = 1;
	optional uint32 brushentity = 2;
	optional float paintradius = 3; 
	optional float alphapercent = 4;
	optional int32 paintcount = 5;
	optional float centerx = 6;
	optional float centery = 7;
	optional float centerz = 8;
	optional int32 contactpointx = 9;
	optional int32 contactpointy = 10;
	optional int32 contactpointz = 11;
}

message CUsrMsg_PaintEntity
{
	optional uint32 paintableent = 1;
	optional uint32 paintpower = 2;
	optional float posx = 3;
	optional float posy = 4;
	optional float posz = 5;
}

message CUsrMsg_ChangePaintColor
{
	optional uint32 entity = 1;
	optional uint32 paintpower = 2;
}

message CUsrMsg_PaintBombExplode
{
	optional int32 dummy = 1;
}

message CUsrMsg_RemoveAllPaint
{
	optional int32 dummy = 1;
}

message CUsrMsg_PaintAllSurfaces
{
	optional uint32 paintpower = 1;
}

message CUsrMsg_RemovePaint
{
	optional uint32 entity = 1;
}

message CUsrMsg_StartSurvey
{
	optional int32 dummy = 1;
}

message CUsrMsg_ApplyHitBoxDamageEffect
{
	optional int32 dummy = 1;
}

message CUsrMsg_SetMixLayerTriggerFactor
{
	optional string layername = 1;
	optional string mixgroupname = 2;
	optional float factor = 3;
}

message CUsrMsg_TransitionFade
{
	optional float fadetime = 1;
}

message CUsrMsg_ScoreboardTempUpdate
{
	optional int32 numportals = 1;
	optional int32 time = 2;
}

message CUsrMsg_ChallengeModeCheatSession
{
	optional int32 dummy = 1;
}

message CUsrMsg_ChallengeModeCloseAllUI
{
	optional int32 dummy = 1;
}

 

// Do not remove this comment due to a bug on the Mac OS X protobuf compiler - <sergiy> integrated from Dota
